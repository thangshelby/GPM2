from telegram import Update
import requests
from bs4 import BeautifulSoup
import os
import pandas as pd
import pandas_ta as ta
from datetime import datetime, timedelta, time
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import asyncio
import pytz
from config import folder_path, list_path

async def get_stock_data(stock_code):
    # L·∫•y danh s√°ch file trong th∆∞ m·ª•c
    file_list = [f for f in os.listdir(folder_path) if f.endswith('.txt')]

    # T√¨m file t∆∞∆°ng ·ª©ng v·ªõi m√£ c·ªï phi·∫øu
    file_name = next((f for f in file_list if f.split('.')[0] == stock_code.split('.')[0]), None)
    if not file_name:
        return None, None, None, f"Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu cho m√£ c·ªï phi·∫øu {stock_code}."

    # ƒê·ªçc d·ªØ li·ªáu t·ª´ file
    file_path = os.path.join(folder_path, file_name)
    df = pd.read_csv(file_path, sep='\t')
    df.columns = ['Date', 'Open', 'Low', 'High', 'Close', 'Volume']

    # Chuy·ªÉn c·ªôt Date sang ƒë·ªãnh d·∫°ng datetime
    df['Date'] = pd.to_datetime(df['Date'], format='%Y-%m-%d')

    # T√°ch d·ªØ li·ªáu th√†nh df_1 v√† df_2
    cutoff_date = pd.Timestamp('2022-11-30')
    df_1 = df[df['Date'] <= cutoff_date].copy()
    df_2 = df[df['Date'] > cutoff_date].copy()

    # ƒê·ªçc file th√¥ng tin c√¥ng ty
    data_info_list = pd.read_excel(list_path)
    data_if = data_info_list[data_info_list['RIC'] == stock_code]
    if data_if.empty:
        data_if = data_info_list[data_info_list['Symbol'] == 'VT:' + stock_code.split('.')[0]]

    if data_if.empty:
        return None, None, None, f"Kh√¥ng t√¨m th·∫•y th√¥ng tin c√¥ng ty cho m√£ c·ªï phi·∫øu {stock_code}."

    company_info = data_if.iloc[0].to_dict()
    return df_1, df_2, company_info, None

# N·∫†P D·ªÆ LI·ªÜU M√î PH·ªéNG T·ª™NG NG√ÄY V√Ä T√çNH TO√ÅN C√ÅC CH·ªà S·ªê C·∫¶N THI·∫æT CHO VI·ªÜC RA T√çN HI·ªÜU
async def analyze_stock_data(df_1, df_2):
    # L·∫•y ng√†y th·ª±c t·∫ø t·ª´ h·ªá th·ªëng
    today = datetime.now().date()
    start_date = datetime(2025, 1, 19).date()  # Ng√†y b·∫Øt ƒë·∫ßu m√¥ ph·ªèng

    # T√≠nh s·ªë ng√†y tr√¥i qua
    elapsed_days = (today - start_date).days

    if elapsed_days < 0 or elapsed_days >= len(df_2):
        return f"Kh√¥ng c√≥ d·ªØ li·ªáu m√¥ ph·ªèng cho ng√†y hi·ªán t·∫°i."

    # N·∫°p d·ªØ li·ªáu t·ª´ng ng√†y
    for i in range(elapsed_days + 1):
        current_row = df_2.iloc[i]

        # C·∫≠p nh·∫≠t d·ªØ li·ªáu l·ªãch s·ª≠
        df_1 = pd.concat([df_1, current_row.to_frame().T], ignore_index=True)

        # T√≠nh c√°c ch·ªâ b√°o k·ªπ thu·∫≠t
        #T√≠nh MA
        df_1['MA10'] = df_1['Close'].rolling(window=10).mean()
        df_1['MA20'] = df_1['Close'].rolling(window=20).mean()
        df_1['MA50'] = df_1['Close'].rolling(window=50).mean()

        #T√≠nh BB
        middle_bb = df_1['Close'].rolling(window=20).mean().iloc[-1]
        std_dev = df_1['Close'].rolling(window=20).std().iloc[-1]
        df_1['Middle_BB'] = middle_bb
        df_1['Upper_BB'] = middle_bb + 2 * std_dev
        df_1['Lower_BB'] = middle_bb - 2 * std_dev

        # T√≠nh RSI
        df_1['RSI'] = ta.rsi(close=df_1['Close'], length=14)

        # T√≠nh MACD
        df_1['MACD'] = df_1['Close'].ewm(span=12, adjust=False).mean() - df_1['Close'].ewm(span=26, adjust=False).mean()
        df_1['Signal'] = df_1['MACD'].ewm(span=9, adjust=False).mean()

        # T√≠nh MFI
        # 1. Typical Price
        df_1['Typical_Price'] = (df_1['High'] + df_1['Low'] + df_1['Close']) / 3

        # 2. Raw Money Flow
        df_1['Raw_Money_Flow'] = df_1['Typical_Price'] * df_1['Volume']

        # 3. Money Flow Positive/Negative
        df_1['Positive_Flow'] = df_1['Raw_Money_Flow'].where(df_1['Typical_Price'] > df_1['Typical_Price'].shift(1), 0)
        df_1['Negative_Flow'] = df_1['Raw_Money_Flow'].where(df_1['Typical_Price'] < df_1['Typical_Price'].shift(1), 0)

        # 4. Rolling Sum for 14 periods
        df_1['Positive_Flow_Sum'] = df_1['Positive_Flow'].rolling(window=14).sum()
        df_1['Negative_Flow_Sum'] = df_1['Negative_Flow'].rolling(window=14).sum()

        # 5. Money Flow Ratio
        df_1['Money_Flow_Ratio'] = df_1['Positive_Flow_Sum'] / df_1['Negative_Flow_Sum']

        # 6. MFI Calculation
        df_1['MFI'] = 100 - (100 / (1 + df_1['Money_Flow_Ratio']))

        # Kh·ªëi l∆∞·ª£ng
        df_1['Volume_avg'] = df_1['Volume'].rolling(window=20).mean()

        # L·∫•y d·ªØ li·ªáu ng√†y hi·ªán t·∫°i
        last_index = df_1.last_valid_index()


    # ƒê∆∞a ra t√≠n hi·ªáu giao d·ªãch
    buy_criteria = [
        df_1.loc[last_index, 'MA10'] > df_1.loc[last_index, 'MA20'],
        df_1.loc[last_index, 'MA10'] > df_1.loc[last_index, 'MA50'],
        df_1.loc[last_index, 'RSI'] < 20,
        df_1.loc[last_index, 'MACD'] > df_1.loc[last_index, 'Signal'],
        df_1.loc[last_index, 'Close'] < df_1.loc[last_index, 'Lower_BB'],
        df_1.loc[last_index, 'MFI'] < 20,
        df_1.loc[last_index, 'Volume'] > df_1.loc[last_index, 'Volume_avg']
    ]

    sell_criteria = [
        df_1.loc[last_index, 'MA10'] < df_1.loc[last_index, 'MA20'],
        df_1.loc[last_index, 'MA10'] < df_1.loc[last_index, 'MA50'],
        df_1.loc[last_index, 'RSI'] > 80,
        df_1.loc[last_index, 'MACD'] < df_1.loc[last_index, 'Signal'],
        df_1.loc[last_index, 'Close'] > df_1.loc[last_index, 'Upper_BB'],
        df_1.loc[last_index, 'MFI'] > 80,
        df_1.loc[last_index, 'Volume'] < df_1.loc[last_index, 'Volume_avg']
    ]

    if sum(buy_criteria) >= 3 and sum(buy_criteria) != sum(sell_criteria):
        signal = "Mua"
    elif sum(sell_criteria) >= 3 and sum(buy_criteria) != sum(sell_criteria):
        signal = "B√°n"
    else:
        signal = "Ch∆∞a c√≥ t√≠n hi·ªáu r√µ r√†ng"

    return df_1, current_row, signal, None

def format_analysis_result(df_1, current_row, signal, company_info):
    company_name = company_info['Name']
    exchange = company_info['Exchange']
    symbol = company_info['Symbol'].split(':')[1]
    last_index = df_1.last_valid_index()

    stock_analysis = (
        f"M√É C·ªî PHI·∫æU: {symbol} - Khung ng√†y\n"
        f"Ng√†y m√¥ ph·ªèng: {current_row['Date'].strftime('%d-%m-%Y')}\n\n"
        f"{symbol} - {company_name} - S√†n {exchange}\n\n"
        f"üü¢ Gi√° M·ªü: {current_row['Open']:.2f}, üìà Gi√° cao: {current_row['High']:.2f}, üìâ Gi√° th·∫•p: {current_row['Low']:.2f}\n"
        f"üî¥ Gi√° ƒê√≥ng c·ª≠a: {current_row['Close']:.2f}\n"
        f"üìä Kh·ªëi l∆∞·ª£ng: {int(current_row['Volume']):,}\n\n"
        f"‚û°Ô∏è KHUY·∫æN NGH·ªä: {signal}\n\n"
        "‚ùóÔ∏è L∆∞u √Ω: ƒê·ªçc th√™m ph√¢n t√≠ch k·ªπ thu·∫≠t v√† t√¨nh h√¨nh th·ªã tr∆∞·ªùng tr∆∞·ªõc khi ra quy·∫øt ƒë·ªãnh giao d·ªãch.\n\n"
        "CH·ªà B√ÅO K·ª∏ THU·∫¨T\n"
        f"MA10: {df_1.loc[last_index, 'MA10']:.2f}, MA20: {df_1.loc[last_index, 'MA20']:.2f}\n"
        f"MA50: {df_1.loc[last_index, 'MA50']:.2f}\n"
        f"RSI: {df_1.loc[last_index, 'RSI']:.2f}\n"
        f"MACD: {df_1.loc[last_index, 'MACD']:.2f}, Signal: {df_1.loc[last_index, 'Signal']:.2f}\n"
        f"MFI: {df_1.loc[last_index, 'MFI']:.2f}\n"
    )
    return stock_analysis

# H√ÄM CH√çNH ƒê·ªÇ PH√ÇN T√çCH C·ªî PHI·∫æU 
async def analyze_stock(stock_code):
    # L·∫•y d·ªØ li·ªáu
    df_1, df_2, company_info, error = await get_stock_data(stock_code)
    if error:
        return error

    # Ph√¢n t√≠ch d·ªØ li·ªáu
    df_1, current_row, signal, error = await analyze_stock_data(df_1, df_2)
    if error:
        return error

    # ƒê·ªãnh d·∫°ng k·∫øt qu·∫£
    return format_analysis_result(df_1, current_row, signal, company_info)




# H√ÄM ƒê·ªäNH D·∫†NG K·∫æT QU·∫¢ PH√ÇN T√çCH TOP C·ªî PHI·∫æU MUA/B√ÅN
def format_signal_results(buy_signals, sell_signals, current_date):
    result = f"PH√ÇN T√çCH T√çN HI·ªÜU GIAO D·ªäCH - Ng√†y m√¥ ph·ªèng: {current_date.strftime('%d/%m/%Y')}\n\n"
    
    result += "üü¢ TOP 5 C·ªî PHI·∫æU C√ì T√çN HI·ªÜU MUA:\n"
    for i, signal in enumerate(buy_signals, 1):
        result += (f"{i}. /{signal['symbol']} - {signal['company_name']}\n"
                  f"   Gi√°: {signal['close_price']:.2f} (+{signal['price_change']:.2f}%)\n"
                  f"   Kh·ªëi l∆∞·ª£ng: {int(signal['volume']):,}\n")
    
    result += "\nüî¥ TOP 5 C·ªî PHI·∫æU C√ì T√çN HI·ªÜU B√ÅN:\n"
    for i, signal in enumerate(sell_signals, 1):
        result += (f"{i}. /{signal['symbol']} - {signal['company_name']}\n"
                  f"   Gi√°: {signal['close_price']:.2f} ({signal['price_change']:.2f}%)\n"
                  f"   Kh·ªëi l∆∞·ª£ng: {int(signal['volume']):,}\n")
    
    result += "\n‚ùóÔ∏è L∆∞u √Ω: ƒê√¢y ch·ªâ l√† t√≠n hi·ªáu tham kh·∫£o. Vui l√≤ng ph√¢n t√≠ch th√™m c√°c y·∫øu t·ªë kh√°c tr∆∞·ªõc khi ƒë∆∞a ra quy·∫øt ƒë·ªãnh giao d·ªãch."
    return result

# H√ÄM G·ª¨I T√çN HI·ªÜU 
async def send_daily_signal(context: ContextTypes.DEFAULT_TYPE) -> None:
    buy_signals, sell_signals, current_date = await get_top_signals()
    if buy_signals is None or sell_signals is None:
        await context.bot.send_message(
            chat_id=context.job.data["chat_id"],
            text="C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ph√¢n t√≠ch."
        )
        return
        
    result = format_signal_results(buy_signals, sell_signals, current_date)
    await context.bot.send_message(
        chat_id=context.job.data["chat_id"],
        text=result
    )
# H√ÄM L·ªåC RA TOP 5 C·ªî PHI·∫æU C√ì T√çN HI·ªÜU MUA V√Ä B√ÅN D·ª∞A TR√äN % THAY ƒê·ªîI GI√Å
async def get_top_signals():
    try:
        # L·ªçc danh s√°ch file, lo·∫°i b·ªè danhsach.txt v√† NO1.txt
        file_list = [f for f in os.listdir(folder_path) 
                    if f.endswith('.txt') 
                    and f not in ['danhsach.txt', 'NO1.txt']]
        
        buy_signals = []
        sell_signals = []
        current_date = None

        for file_name in file_list:
            try:
                stock_code = file_name.split('.')[0]
                
                # S·ª≠ d·ª•ng h√†m get_stock_data ƒë·ªÉ l·∫•y d·ªØ li·ªáu
                df_1, df_2, company_info, error = await get_stock_data(stock_code)
                if error:
                    continue

                # Lo·∫°i b·ªè c√°c h√†ng c√≥ gi√° tr·ªã NaN
                # df_1 = df_1.dropna()
                # df_2 = df_2.dropna()
                
                # Ki·ªÉm tra n·∫øu dataframe r·ªóng sau khi lo·∫°i b·ªè NaN
                if df_1.empty or df_2.empty:
                    print(f"B·ªè qua {file_name} do kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá sau khi lo·∫°i b·ªè NaN")
                    continue

                # S·ª≠ d·ª•ng h√†m analyze_stock_data ƒë·ªÉ ph√¢n t√≠ch
                df_1_analyzed, current_row, signal, error = await analyze_stock_data(df_1, df_2)
                if error:
                    continue

                # L∆∞u ng√†y hi·ªán t·∫°i
                if current_date is None:
                    current_date = current_row['Date']
                
                # T√≠nh % thay ƒë·ªïi gi√°
                if len(df_2) > 1:
                    prev_close = df_2.iloc[df_2.index.get_loc(current_row.name) - 1]['Close']
                    price_change_pct = ((current_row['Close'] - prev_close) / prev_close) * 100
                else:
                    price_change_pct = 0

                # Th√™m v√†o danh s√°ch t∆∞∆°ng ·ª©ng n·∫øu c√≥ t√≠n hi·ªáu
                if signal == "Mua":
                    buy_signals.append({
                        'symbol': stock_code,
                        'company_name': company_info['Name'],
                        'price_change': price_change_pct,
                        'close_price': current_row['Close'],
                        'volume': current_row['Volume']
                    })
                elif signal == "B√°n":
                    sell_signals.append({
                        'symbol': stock_code,
                        'company_name': company_info['Name'],
                        'price_change': price_change_pct,
                        'close_price': current_row['Close'],
                        'volume': current_row['Volume']
                    })

            except Exception as e:
                print(f"L·ªói khi x·ª≠ l√Ω file {file_name}: {str(e)}")
                continue

        # S·∫Øp x·∫øp v√† l·∫•y top 5
        buy_signals = sorted(buy_signals, key=lambda x: x['price_change'], reverse=True)[:5]
        sell_signals = sorted(sell_signals, key=lambda x: x['price_change'])[:5]

        return buy_signals, sell_signals, current_date

    except Exception as e:
        print(f"L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch: {str(e)}")
        return None, None, None
