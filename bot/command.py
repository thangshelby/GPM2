from telegram import Update
import requests
from bs4 import BeautifulSoup
import os
import pandas as pd
import pandas_ta as ta
from datetime import datetime, timedelta, time
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import asyncio
import pytz
from openai import OpenAI
import google.generativeai as genai
from dotenv import load_dotenv
from config import generation_config, safety_settings,help_message
load_dotenv()

from utils import get_stock_data,analyze_stock ,format_signal_results,send_daily_signal,get_top_signals

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    welcome_message = (
        "Xin ch√†o! T√¥i l√† bot ph√¢n t√≠ch c·ªï phi·∫øu. üìä\n\n"
        "C√°ch s·ª≠ d·ª•ng:\n"
        "- G√µ /[m√£ c·ªï phi·∫øu] ƒë·ªÉ xem ph√¢n t√≠ch (VD: /VCB, /ACB)\n"
        "- G√µ /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n\n"
        "- G√µ /tinhieu ƒë·ªÉ xem top 5 c·ªï phi·∫øu c√≥ t√≠n hi·ªáu MUA/B√ÅN d·ª±a tr√™n % thay ƒë·ªïi gi√° ƒë√≥ng c·ª≠a v√† chatbot t·ª± ƒë·ªông c·∫≠p nh·∫≠t t√≠n hi·ªáu h·∫±ng ng√†y"
    )
    await update.message.reply_text(welcome_message)
    
    
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(help_message)


async def stock_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    stock_code = update.message.text[1:].upper()
    result =  await analyze_stock(stock_code)
    await update.message.reply_text(result)


async def signal_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    now = datetime.now(pytz.timezone('Asia/Ho_Chi_Minh'))
    current_time = now.time()

    await update.message.reply_text("ƒêang ph√¢n t√≠ch t√≠n hi·ªáu giao d·ªãch...")

    try:
        buy_signals, sell_signals, current_date = await get_top_signals()
        if buy_signals is None or sell_signals is None:
            await update.message.reply_text("C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ph√¢n t√≠ch.")
            return
        
        result = format_signal_results(buy_signals, sell_signals, current_date)
        await update.message.reply_text(result)
    except Exception as e:
        await update.message.reply_text(f"L·ªói ph√¢n t√≠ch t√≠n hi·ªáu: {e}")
        return

    # Thi·∫øt l·∫≠p th·ªùi gian
    target_time = time(hour=15, minute=00)
    tz = pytz.timezone('Asia/Ho_Chi_Minh')
    target_datetime = datetime.combine(now.date(), target_time, tzinfo=tz)

    # Ki·ªÉm tra n·∫øu th·ªùi gian hi·ªán t·∫°i ƒë√£ qua 15:00, l√™n l·ªãch cho ng√†y h√¥m sau
    if current_time >= target_time:
        target_datetime += timedelta(days=1)

    # X√≥a job c≈© n·∫øu c√≥
    current_jobs = context.job_queue.get_jobs_by_name(f'signal_job_{chat_id}')
    if current_jobs:
        for job in current_jobs:
            job.schedule_removal()

    # T·∫°o job m·ªõi
    context.job_queue.run_once(
        send_daily_signal,
        when=target_datetime,
        data={'chat_id': chat_id},
        name=f'signal_job_{chat_id}'
    )
    await update.message.reply_text(
        f"ƒê√£ thi·∫øt l·∫≠p g·ª≠i t√≠n hi·ªáu t·ª± ƒë·ªông v√†o l√∫c 15:00 ng√†y {target_datetime.strftime('%d/%m/%Y')}!"
    )

async def news_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    list_news = []
    r = requests.get('https://vnexpress.net/kinh-doanh/chung-khoan')
    
    soup = BeautifulSoup(r.text, 'html.parser')
    mydivs = soup.find_all("h2", {"class": "title-news"})
    for new in mydivs:
        newdic = {}
        newdic["title"] = new.a.get("title")
        newdic["link"] = new.a.get("href")
        list_news.append(newdic)
        
    response = ""
    for idx, item in enumerate(list_news[0:5], start=1):
        response += f"{idx}. {item['title']}\n{item['link']}\n\n"
    await update.message.reply_text(f'Top tin t·ª©c m·ªõi nh·∫•t h√¥m nay:\n {response}')
    
    


async def chatbot_command (update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
   
    genai.configure(api_key=os.getenv("GENAI_API_KEY"))

    # C·∫•u h√¨nh model

    model = genai.GenerativeModel(
    model_name="gemini-2.0-flash-exp",
    safety_settings=safety_settings,
    generation_config=generation_config,
    system_instruction="Chatbot n√†y s·∫Ω ho·∫°t ƒë·ªông nh∆∞ m·ªôt broker ch·ª©ng kho√°n chuy√™n nghi·ªáp, h·ªó tr·ª£ ng∆∞·ªùi d√πng trong vi·ªác mua b√°n c·ªï phi·∫øu v√† cung c·∫•p t∆∞ v·∫•n ƒë·∫ßu t∆∞. N√≥ s·∫Ω ph√¢n t√≠ch d·ªØ li·ªáu th·ªã tr∆∞·ªùng ƒë·ªÉ ƒë∆∞a ra c√°c khuy·∫øn ngh·ªã mua ho·∫∑c b√°n c·ªï phi·∫øu, d·ª±a tr√™n xu h∆∞·ªõng hi·ªán t·∫°i v√† l·ªãch s·ª≠ giao d·ªãch. Ngo√†i ra, chatbot c√≤n cung c·∫•p th√¥ng tin th·ªã tr∆∞·ªùng ƒë∆∞·ª£c c·∫≠p nh·∫≠t li√™n t·ª•c, bao g·ªìm c√°c ch·ªâ s·ªë ch·ª©ng kho√°n, tin t·ª©c v·ªÅ th·ªã tr∆∞·ªùng, v√† b√°o c√°o ph√¢n t√≠ch t√†i ch√≠nh c·ªßa c√°c c√¥ng ty, gi√∫p ng∆∞·ªùi d√πng c√≥ ƒë∆∞·ª£c c√°i nh√¨n s√¢u s·∫Øc v√† ƒë·∫ßy ƒë·ªß v·ªÅ t√¨nh h√¨nh t√†i ch√≠nh v√† kinh t·∫ø m√† h·ªç quan t√¢m.",
    )

    chat_session = model.start_chat(
        history=[]
    )
    user_input = update.message.text

    try:
        response = chat_session.send_message(user_input)
        model_response = response.text

        
        chat_session.history.append({"role": "user", "parts": [user_input]})
        chat_session.history.append({"role": "model", "parts": [model_response]})
        
        await update.message.reply_text(model_response)
        # bot.reply_to(message, f"{model_response}")

    except Exception as e:
        await update.message.reply_text(f"C√≥ l·ªói x·∫£y ra khi chatbot giao ti·∫øp: {e}")



async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    try:
        # Gi·∫£ ƒë·ªãnh message.text l√† "/info TCB"
        ticker= update.message.text.split(' ')[1].upper()

        # ƒê·ªçc DataFrame t·ª´ file Excel
        file_path = 'E:\github\python\GPM1\GPM1_G2\Vietnam\Vietnam.xlsx'  # Ch·ªâ ƒë·ªãnh ƒë∆∞·ªùng d·∫´n file
        df = pd.read_excel(file_path)  # ƒê·ªçc file

        # Ki·ªÉm tra xem c·ªôt 'Symbol' c√≥ t·ªìn t·∫°i trong DataFrame kh√¥ng
        if 'Symbol' not in df.columns:
            raise ValueError("C·ªôt 'Symbol' kh√¥ng t·ªìn t·∫°i trong file Excel.")

        # In ra c√°c m√£ c·ªï phi·∫øu c√≥ trong DataFrame ƒë·ªÉ ki·ªÉm tra
        print("C√°c m√£ c·ªï phi·∫øu c√≥ trong DataFrame:", df['Symbol'].unique())

        # T√¨m th√¥ng tin c·ªï phi·∫øu b·∫±ng c√°ch l·ªçc DataFrame
        stock_info = df[df['Symbol'] == 'VT:'+ticker]
        if stock_info.empty:
            print(f"Kh√¥ng t√¨m th·∫•y m√£ c·ªï phi·∫øu {ticker} trong d·ªØ li·ªáu.")
            raise ValueError("Kh√¥ng t√¨m th·∫•y m√£ c·ªï phi·∫øu n√†y trong d·ªØ li·ªáu.")
        
        # In ra th√¥ng tin chi ti·∫øt c·ªßa m√£ c·ªï phi·∫øu ƒë·ªÉ ki·ªÉm tra
        print(f"Th√¥ng tin chi ti·∫øt c·ªßa m√£ c·ªï phi·∫øu {ticker}:", stock_info)

        # Chu·∫©n b·ªã c√¢u tr·∫£ l·ªùi
        response = (f"Symbol: {stock_info.iloc[0]['Symbol']}\n"
                    f"Start Date: {stock_info.iloc[0]['Start Date']}\n"
                    f"Hist.: {stock_info.iloc[0]['Hist.']}\n"
                    f"Exchange: {stock_info.iloc[0]['Exchange']}\n"
                    f"Market: {stock_info.iloc[0]['Market']}\n"
                    f"Currency: {stock_info.iloc[0]['Currency']}\n"
                    f"Sector: {stock_info.iloc[0]['Sector']}\n"
                    f"Full Name: {stock_info.iloc[0]['Full Name']}\n"
                    f"Activity: {stock_info.iloc[0]['Activity']}")
        
        await update.message.reply_text(response)

    except ValueError as e:
        await update.message.reply_text(str(e))
    except IndexError:
        await update.message.reply_text( "Vui l√≤ng cung c·∫•p m√£ c·ªï phi·∫øu theo c·∫•u tr√∫c: /info {ticker}.")
    except Exception as e:
        await update.message.reply_text( f"ƒê√£ c√≥ l·ªói x·∫£y ra: {str(e)}")